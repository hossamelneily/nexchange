box:
  id: onitsoft/wercker:latest
  ports:
    - "8000"
    - "5555"
dev:
  services:
   - id: mdillon/postgis
     ports:
       - "5432"
     env:
       POSTGRES_USER: nexchange
       POSTGRES_PASSWORD: nexchange
       POSTGRES_DB: nexchange
   - name: redis
     id: redis
     cmd: redis-server

  steps:
    - script:
        name: export django settings module
        code: |
          export DJANGO_SETTINGS_MODULE=nexchange.settings_dev
    - script:
        name: create static and media root
        code: |
          mkdir -p /usr/share/nginx/html/static
          mkdir -p /usr/share/nginx/html/media
    - script:
        name: pip install requirements (with cache)
        code: |
          pip_download_cache="$WERCKER_CACHE_DIR/wercker/_pipcache"
          mkdir -p ${pip_download_cache}
          pip install --exists-action w --cache-dir ${pip_download_cache} -r requirements.txt
    - script:
        name: Django make migrations
        code: |
          yes y | python manage.py makemigrations --merge
          python manage.py makemigrations core
          python manage.py makemigrations
    - script:
        name: wait...
        code: |
          sleep 5
    - script:
        name: Django apply migrations
        code: |
          python manage.py migrate
    - script:
      name: collect static
      code: |
        yes 'yes' | python manage.py collectstatic
    - script:
        name: create/validate static build roots
        code: |
           mkdir -p static/bundles
           touch webpack-stats.json
    - script:
      name: Install node requirements
      code: |
        npm install
    - maxon/npm-run:
        script: build
    - script:
        name: Run celery
        code: |
          # Start celery stuff
          export DJANGO_SETTINGS_MODULE=nexchange.settings_dev
          adduser --disabled-password --gecos '' celery_user
          touch /var/log/celeryd.log
          touch /var/log/celery-beat.log
          chown celery_user /var/log/celery*
          celery worker -A nexchange --uid=celery_user -l info -f /var/log/celeryd.log &
          celery beat -A nexchange -l info -f /var/log/celery-beat.log &
          celery -A nexchange flower &
    - script:
        name: Django collect & compile messages
        code: |
#          bash ./collect_translations.sh
    - script:
      name: Django create superuser
      code: |
          echo "from django.contrib.auth.models import User; User.objects.create_superuser('onit', 'weare@onit.ws','weare0nit')" | python manage.py shell
    - script:
        name: Django import Currency fixture
        code: |
          python manage.py loaddata core/fixtures/market.json
          python manage.py loaddata core/fixtures/currency_crypto.json
          python manage.py loaddata core/fixtures/currency_fiat.json
          python manage.py loaddata core/fixtures/currency_tokens.json
    - script:
        name: Django import Country fixture
        code: |
          python manage.py loaddata core/fixtures/country.json
    - script:
        name: Django import Pair fixture
        code: |
          python manage.py loaddata core/fixtures/pairs_cross.json
          python manage.py loaddata core/fixtures/pairs_btc.json
          python manage.py loaddata core/fixtures/pairs_ltc.json
          python manage.py loaddata core/fixtures/pairs_eth.json
          python manage.py loaddata core/fixtures/pairs_rns.json
          python manage.py loaddata core/fixtures/pairs_bch.json
          python manage.py loaddata core/fixtures/pairs_xvg.json
          python manage.py loaddata core/fixtures/pairs_doge.json
          python manage.py loaddata core/fixtures/pairs_nano.json
          python manage.py loaddata core/fixtures/pairs_omg.json
          python manage.py loaddata core/fixtures/pairs_bdg.json
          python manage.py loaddata core/fixtures/pairs_eos.json
          python manage.py loaddata core/fixtures/pairs_zec.json
    - script:
        name: Django import Payment Methods fixture
        code: |
          python manage.py loaddata payments/fixtures/payment_method.json
    - script:
        name: Django import Payment Preference fixture
        code: |
          python manage.py loaddata payments/fixtures/payment_preference.json
    - script:
        name: Django import Withdraw address fixture
        code: |
          python manage.py loaddata core/fixtures/withdraw_address.json
    - script:
        name: Django import referral program fixture
        code: |
          python manage.py loaddata referrals/fixtures/program.json
    - script:
        name: Django import risk_management fixtures
        code: |
          python manage.py loaddata risk_management/fixtures/reserve.json
          python manage.py loaddata risk_management/fixtures/account.json
    - script:
        name: Django import verification fixtures
        code: |
          python manage.py loaddata verification/fixtures/document_type.json
          python manage.py loaddata verification/fixtures/tier0.json
          python manage.py loaddata verification/fixtures/tier1.json
          python manage.py loaddata verification/fixtures/tier2.json
          python manage.py loaddata verification/fixtures/tier3.json
    - script:
        name: Django import Articles fixtures
        code: |
          if [ ! -z $LOCAL_CMS ] && [ ${LOCAL_CMS} -eq 1 ]
          then
            python manage.py loaddata articles/fixtures/articles.json
          fi
    - script:
        name: Link pre-commit hook script
          chmod +x .pre-commit.sh
          if [ ! -d .git/hooks/ ]; then
            mkdir .git/hooks/
          fi
          cd .git/hooks/
          ln -fs ../../.pre-commit.sh pre-commit
          cd -
    - internal/watch:
        code: |
          echo 'Dev server running'
          npm run build-dev &
          npm run watch &
          tail -n 50 -f /var/log/*.log &
          newrelic-admin run-program python manage.py runserver_plus 0.0.0.0:8000
        reload: false

build:
  services:
   - id: mdillon/postgis
     env:
       POSTGRES_USER: ${POSTGIS_ENV_POSTGRES_USER}
       POSTGRES_PASSWORD: ${POSTGIS_ENV_POSTGRES_PASSWORD}
       POSTGRES_DB: ${POSTGIS_ENV_POSTGRES_DB}
   - name: redis
     id: redis
     cmd: redis-server
  steps:
    - install-packages:
      packages: netcat
    - script:
        name: create static and media root
        code: |
          mkdir -p /usr/share/nginx/html/static
          mkdir -p /usr/share/nginx/html/media
    - script:
        name: Install python requirements
        code: |
          pip_download_cache="$WERCKER_CACHE_DIR/wercker/_pipcache"
          mkdir -p ${pip_download_cache}
          pip install --exists-action w --cache-dir ${pip_download_cache} -r requirements.txt
    - script:
        name: Django migrations
        code: |
          python manage.py makemigrations
    - script:
        name: django compile translations
        code: |
           bash ./collect_translations.sh
    - script:
        name: create/validate static build roots
        code: |
           mkdir -p static/bundles
           touch webpack-stats.json
    - script:
      name: Install node requirements
      code: |
        # https://github.com/wercker/support/issues/227 :(
        rm -fr node_modules && npm install
    - maxon/npm-run:
        script: build
    - script:
      name: collect static
      code: |
        yes 'yes' | python manage.py collectstatic
    - script:
      name: copy files
      code: |
        mkdir -p /usr/src/app
        cp -r [a-z]* /usr/src/app
        cp -r /usr/share/nginx/html/static $WERCKER_OUTPUT_DIR/staticfiles
        cp -r /usr/share/nginx/html/media $WERCKER_OUTPUT_DIR/mediafiles
    - script:
        name: place docker-compose and nginx.conf files
        code: |
          mv "nginx.conf" "$WERCKER_OUTPUT_DIR/nginx.conf"
          mv "docker-compose.yml" "$WERCKER_OUTPUT_DIR/docker-compose.yml"
    - create-file:
        #
        # PEM_FILE_CONTENT - the key to SSH into server (create key par via wercker web interface. remeber to install public key on server)
        # SSH_USER - the user to SSH into server
        # DEST_HOST_ADDR - server where to
        #
        # DOCKER_HUB_USER - dockerhub username
        # DOCKER_HUB_PASSWORD - dockerhub password (defined as a protectd var)
        # DOCKER_HUB_REPO - the dockerhub repo where to push (repo must already exists and should be private)
        name: Create production entrypoint
        filename: /entrypoint.sh
        overwrite: true
        content: |-
          #!/bin/bash
          # ###
          # This script is generate in deploy step and:
          #   Exports variables
          #   Apply migrations
          #   Starts gunicorn
          # ###
          export DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
          export GUNICORN_PORT=${GUNICORN_PORT}
          export POSTGIS_ENV_POSTGRES_USER=${POSTGIS_ENV_POSTGRES_USER}
          export POSTGIS_ENV_POSTGRES_PASSWORD=${POSTGIS_ENV_POSTGRES_PASSWORD}
          export POSTGIS_ENV_POSTGRES_DB=${POSTGIS_ENV_POSTGRES_DB}
          export POSTGIS_PORT_5432_TCP_ADDR=${POSTGIS_PORT_5432_TCP_ADDR}
          export POSTGIS_PORT_5432_TCP_PORT=${POSTGIS_PORT_5432_TCP_PORT}
          export NEW_RELIC_CONFIG_FILE=${NEW_RELIC_CONFIG_FILE}
          export NEW_RELIC_ENVIRONMENT=${NEW_RELIC_ENVIRONMENT}
          export NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
          export REDIS_PORT_6379_TCP_ADDR=${REDIS_PORT_6379_TCP_ADDR}
          export REDIS_PORT_6379_TCP_PORT=${REDIS_PORT_6379_TCP_PORT}
          # SECURITY SETTINGS
          # DJ SECRET
          export SECRET_KEY='${SECRET_KEY}'
          # DEBUG
          export DEBUG=${DEBUG}
          export CELERY_TASK_ALWAYS_EAGER=${CELERY_ALWAYS_EAGER}
          export API1_IS_TEST=${API1_IS_TEST}
          export API1_ID_C1=${API1_ID_C1}
          export API1_ID_C2=${API1_ID_C2}
          export API1_ID_C3=${API1_ID_C3}
          export API1_ID_C4=${API1_ID_C4}
          # YANDEX
          export YANDEX_METRICA_ID_UK=${YANDEX_METRICA_ID_UK}
          export YANDEX_METRICA_ID_RU=${YANDEX_METRICA_ID_RU}
          # GA
          export GOOGLE_ANALYTICS_PROPERTY_ID_UK=${GOOGLE_ANALYTICS_PROPERTY_ID_UK}
          export GOOGLE_ANALYTICS_PROPERTY_ID_RU=${GOOGLE_ANALYTICS_PROPERTY_ID_RU}
          # CAPTCHA
          export RECAPTCHA_SITEKEY=${RECAPTCHA_SITEKEY}
          export RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
          # PAYEER
          export PAYEER_IPN_KEY=${PAYEER_IPN_KEY}
          export PAYEER_WALLET=${PAYEER_WALLET}
          export PAYEER_ACCOUNT=${PAYEER_ACCOUNT}
          export PAYEER_API_ID=${PAYEER_API_ID}
          export PAYEER_API_KEY=${PAYEER_API_KEY}
          # OKPAY
          export OKPAY_WALLET=${OKPAY_WALLET}
          export OKPAY_API_KEY=${OKPAY_API_KEY}
          # API1
          export API1_PAT=${API1_PAT}
          # API2
          export API2_KEY=${API2_KEY}
          export API2_SECRET=${API2_SECRET}
          # API3
          export API3_KEY=${API3_KEY}
          export API3_SECRET=${API3_SECRET}
          export API3_PUBLIC_KEY_C1=${API3_PUBLIC_KEY_C1}
          # API4
          export API4_KEY=${API4_KEY}
          export API4_SECRET=${API4_SECRET}
          # API5
          export API5_KEY=${API5_KEY}
          export API5_SECRET=${API5_SECRET}
          # CARDPMT
          export CARDPMT_API_ID=${CARDPMT_API_ID}
          export CARDPMT_API_PASS=${CARDPMT_API_PASS}
          # SOFORT
          export SOFORT_API_KEY=${SOFORT_API_KEY}
          # ADV CASH
          export ADV_CASH_API_NAME=${ADV_CASH_API_NAME}
          export ADV_CASH_ACCOUNT_EMAIL=${ADV_CASH_ACCOUNT_EMAIL}
          export ADV_CASH_API_PASSWORD=${ADV_CASH_API_PASSWORD}
          export ADV_CASH_SCI_NAME=${ADV_CASH_SCI_NAME}
          export ADV_CASH_SCI_PASSWORD=${ADV_CASH_SCI_PASSWORD}
          export ADV_CASH_WALLET_USD=${ADV_CASH_WALLET_USD}
          export ADV_CASH_WALLET_EUR=${ADV_CASH_WALLET_EUR}
          export ADV_CASH_WALLET_GBP=${ADV_CASH_WALLET_GBP}
          export ADV_CASH_WALLET_RUB=${ADV_CASH_WALLET_RUB}
          # ROBOKASSA
          export ROBOKASSA_IS_TEST=${ROBOKASSA_IS_TEST}
          export ROBOKASSA_LOGIN=${ROBOKASSA_LOGIN}
          export ROBOKASSA_PASS1=${ROBOKASSA_PASS1}
          export ROBOKASSA_PASS2=${ROBOKASSA_PASS2}
          # Twilio
          export TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
          export TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
          # Safe Charge
          export SAFE_CHARGE_MERCHANT_ID=${SAFE_CHARGE_MERCHANT_ID}
          export SAFE_CHARGE_MERCHANT_SITE_ID=${SAFE_CHARGE_MERCHANT_SITE_ID}
          export SAFE_CHARGE_SECRET_KEY=${SAFE_CHARGE_SECRET_KEY}
          export SAFE_CHARGE_SUCCESS_URL=${SAFE_CHARGE_SUCCESS_URL}
          export SAFE_CHARGE_ERROR_URL=${SAFE_CHARGE_ERROR_URL}
          export SAFE_CHARGE_PENDING_URL=${SAFE_CHARGE_PENDING_URL}
          export SAFE_CHARGE_BACK_URL=${SAFE_CHARGE_BACK_URL}
          # Smtp
          export EMAIL_HOST=${EMAIL_HOST}
          export EMAIL_HOST_USER=${EMAIL_HOST_USER}
          export EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
          export EMAIL_PORT=${EMAIL_PORT}

          #RPC1
          export RPC_RPC1_USER=${RPC_RPC1_USER}
          export RPC_RPC1_PASSWORD=${RPC_RPC1_PASSWORD}
          export RPC_RPC1_PORT=${RPC_RPC1_PORT}
          export RPC_RPC1_HOST=${RPC_RPC1_HOST}
          export RPC_RPC1_K=${RPC_RPC1_K}

          #RPC2
          export RPC_RPC2_USER=${RPC_RPC2_USER}
          export RPC_RPC2_PASSWORD=${RPC_RPC2_PASSWORD}
          export RPC_RPC2_PORT=${RPC_RPC2_PORT}
          export RPC_RPC2_HOST=${RPC_RPC2_HOST}
          export RPC2_PUBLIC_KEY_C1=${RPC2_PUBLIC_KEY_C1}
          export RPC_RPC2_K=${RPC_RPC2_K}


          #RPC3
          export RPC_RPC3_USER=${RPC_RPC3_USER}
          export RPC_RPC3_PASSWORD=${RPC_RPC3_PASSWORD}
          export RPC_RPC3_PORT=${RPC_RPC3_PORT}
          export RPC_RPC3_HOST=${RPC_RPC3_HOST}
          export RPC3_PUBLIC_KEY_C1=${RPC3_PUBLIC_KEY_C1}
          export RPC_RPC3_K=${RPC_RPC3_K}

          #RPC4
          export RPC_RPC4_USER=${RPC_RPC4_USER}
          export RPC_RPC4_PASSWORD=${RPC_RPC4_PASSWORD}
          export RPC_RPC4_PORT=${RPC_RPC4_PORT}
          export RPC_RPC4_HOST=${RPC_RPC4_HOST}
          export RPC4_PUBLIC_KEY_C1=${RPC4_PUBLIC_KEY_C1}
          export RPC_RPC4_K=${RPC_RPC4_K}

          #RPC5
          export RPC_RPC5_USER=${RPC_RPC5_USER}
          export RPC_RPC5_PASSWORD=${RPC_RPC5_PASSWORD}
          export RPC_RPC5_PORT=${RPC_RPC5_PORT}
          export RPC_RPC5_HOST=${RPC_RPC5_HOST}
          export RPC5_PUBLIC_KEY_C1=${RPC5_PUBLIC_KEY_C1}
          export RPC_RPC5_K=${RPC_RPC5_K}

          #RPC6
          export RPC_RPC6_USER=${RPC_RPC6_USER}
          export RPC_RPC6_PASSWORD=${RPC_RPC6_PASSWORD}
          export RPC_RPC6_PORT=${RPC_RPC6_PORT}
          export RPC_RPC6_HOST=${RPC_RPC6_HOST}
          export RPC6_PUBLIC_KEY_C1=${RPC6_PUBLIC_KEY_C1}
          export RPC_RPC6_K=${RPC_RPC6_K}

          #RPC7
          export RPC_RPC7_USER=${RPC_RPC7_USER}
          export RPC_RPC7_PORT=${RPC_RPC7_PORT}
          export RPC_RPC7_HOST=${RPC_RPC7_HOST}
          export RPC7_PUBLIC_KEY_C1=${RPC7_PUBLIC_KEY_C1}
          export RPC_RPC7_K=${RPC_RPC7_K}

          #RPC8
          export RPC_RPC8_USER=${RPC_RPC8_USER}
          export RPC_RPC8_PASSWORD=${RPC_RPC8_PASSWORD}
          export RPC_RPC8_PORT=${RPC_RPC8_PORT}
          export RPC_RPC8_HOST=${RPC_RPC8_HOST}
          export RPC8_PUBLIC_KEY_C1=${RPC8_PUBLIC_KEY_C1}
          export RPC8_WALLET=${RPC8_WALLET}
          export RPC_RPC8_K=${RPC_RPC8_K}

          #RPC9
          export RPC_RPC9_USER=${RPC_RPC9_USER}
          export RPC_RPC9_PASSWORD=${RPC_RPC9_PASSWORD}
          export RPC_RPC9_PORT=${RPC_RPC9_PORT}
          export RPC_RPC9_HOST=${RPC_RPC9_HOST}
          export RPC9_PUBLIC_KEY_C1=${RPC9_PUBLIC_KEY_C1}
          export RPC_RPC9_K=${RPC_RPC9_K}

          # RPC settings
          export RPC_IMPORT_TRANSACTIONS_COUNT=${RPC_IMPORT_TRANSACTION_COUNT}
          export RPC_IMPORT_BLOCK_COUNT=${RPC_IMPORT_BLOCK_COUNT}
          export RPC_GAS_LIMIT_ETH=${RPC_GAS_LIMIT_ETH}
          export RPC_GAS_LIMIT_TOKEN=${RPC_GAS_LIMIT_TOKEN}
          export RPC_GAS_PRICE=${RPC_GAS_PRICE}

          # SOCIAL login
          export SOCIAL_AUTH_TWITTER_KEY=${SOCIAL_AUTH_TWITTER_KEY}
          export SOCIAL_AUTH_TWITTER_SECRET=${SOCIAL_AUTH_TWITTER_SECRET}
          export SOCIAL_AUTH_FACEBOOK_KEY=${SOCIAL_AUTH_FACEBOOK_KEY}
          export SOCIAL_AUTH_FACEBOOK_SECRET=${SOCIAL_AUTH_FACEBOOK_SECRET}
          export SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}
          export SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET}
          export SOCIAL_AUTH_GITHUB_KEY=${SOCIAL_AUTH_GITHUB_KEY}
          export SOCIAL_AUTH_GITHUB_SECRET=${SOCIAL_AUTH_GITHUB_SECRET}
          #
          while ! nc -z ${POSTGIS_PORT_5432_TCP_ADDR} ${POSTGIS_PORT_5432_TCP_PORT}
          do
            >&2 echo "PostgreSQL '(${POSTGIS_PORT_5432_TCP_ADDR}:${POSTGIS_PORT_5432_TCP_PORT})' not ready - waiting..."
            sleep 1;
          done
          echo "PostgreSQL '(${POSTGIS_PORT_5432_TCP_ADDR}:${POSTGIS_PORT_5432_TCP_PORT})' is ready - moving on..."
          #
          # Apply migrations
          python /usr/src/app/manage.py migrate
          # Import fixtures
          python /usr/src/app/manage.py loaddata core/fixtures/market.json
          python /usr/src/app/manage.py loaddata core/fixtures/currency_crypto.json
          python /usr/src/app/manage.py loaddata core/fixtures/currency_fiat.json
          python /usr/src/app/manage.py loaddata core/fixtures/currency_tokens.json
          python /usr/src/app/manage.py loaddata core/fixtures/country.json
          python /usr/src/app/manage.py loaddata payments/fixtures/payment_method.json
          python /usr/src/app/manage.py loaddata payments/fixtures/payment_preference.json
          python /usr/src/app/manage.py loaddata referrals/fixtures/program.json
          python /usr/src/app/manage.py loaddata risk_management/fixtures/reserve.json
          python /usr/src/app/manage.py loaddata risk_management/fixtures/account.json
          python /usr/src/app/manage.py loaddata verification/fixtures/document_type.json
          python /usr/src/app/manage.py loaddata verification/fixtures/tier0.json
          python /usr/src/app/manage.py loaddata verification/fixtures/tier1.json
          python /usr/src/app/manage.py loaddata verification/fixtures/tier2.json
          python /usr/src/app/manage.py loaddata verification/fixtures/tier3.json
          echo "To load the 'withdraw_address' fixture, uncomment the next line"
          # python manage.py loaddata core/fixtures/withdraw_address.json
          python manage.py loaddata core/fixtures/pairs_cross.json
          python manage.py loaddata core/fixtures/pairs_btc.json
          python manage.py loaddata core/fixtures/pairs_ltc.json
          python manage.py loaddata core/fixtures/pairs_eth.json
          python manage.py loaddata core/fixtures/pairs_rns.json
          python manage.py loaddata core/fixtures/pairs_bch.json
          python manage.py loaddata core/fixtures/pairs_doge.json
          python manage.py loaddata core/fixtures/pairs_xvg.json
          python manage.py loaddata core/fixtures/pairs_nano.json
          python manage.py loaddata core/fixtures/pairs_omg.json
          python manage.py loaddata core/fixtures/pairs_bdg.json
          python manage.py loaddata core/fixtures/pairs_eos.json
          python manage.py loaddata core/fixtures/pairs_zec.json

          if [ ! -z $CMS_FROM_FIXTURE] && [ ${CMS_FROM_FIXTURE} -eq 1 ]
          then
            python manage.py loaddata articles/fixtures/articles.json
          fi
          # Copy static data to nginx volume

          cp -ra $WERCKER_OUTPUT_DIR/staticfiles/* /usr/share/nginx/html/static
          cp -ra $WERCKER_OUTPUT_DIR/mediafiles/* /usr/share/nginx/html/media
          #
          # Create superuser
          echo "from django.contrib.auth.models import User; User.objects.create_superuser('onit', 'weare@onit.ws','weare0nit')" | python manage.py shell
          #

          # enable pairs
          # echo "from core.tests.utils import enable_prod_pairs; enable_prod_pairs()" | python manage.py shell
          #
          # Start Cron Process
          # cron
          # Fix orders and transactions
          python manage.py migrate_order_statuses
          python manage.py fix_replay_transactions
          # Start celery stuff

          # Protect staging by password from ENV
          echo -n "$HTTP_AUTH_USER:" >> /nexchange/etc/nginx/.htpasswd
          openssl passwd -apr1 $HTTP_AUTH_PASS >> /nexchange/etc/nginx/.htpasswd

          adduser --disabled-password --gecos '' celery_user
          celery worker -A nexchange --uid=celery_user -l info -c 4 &
          celery beat -A nexchange -l info &
          echo "Gunicorn start"
          exec newrelic-admin run-program gunicorn --chdir /usr/src/app --name nexchange --bind 0.0.0.0:${GUNICORN_PORT} --workers 3 --log-level=info --access-logfile=- nexchange.wsgi:application "$@"
          # Remove entrypoint in production to protect data
          echo "from django.conf import settings; import os; int_debug = 1 if settings.DEBUG else 0; os.environ['PYDEBUG']=int_debug" | python manage.py shell
          if ! [ $PYDEBUG ]; then
            rm $0
          fi

    - script:
        name: set entrypoint as executable
        code: |
          chmod +x /entrypoint.sh
    - create-file:
        name: Create cron invoked script to dump celery events
        filename: /celery_dump_events.sh
        overwrite: true
        content: |-
          #!/bin/bash
          cd ${WERCKER_SOURCE_DIR}
          # --dump flag already dumps to /dev/stdout
          celery -A nexchange events --dump
    - script:
        name: Add cron jobs
        code: |
          # chmod +x /celery_dump_events.sh
          # monitor celery events and dispatch to ELK stack every 5 minutes
          # echo "*/5 * * * * root /celery_dump_events.sh" >> /etc/crontab
          # start cron
          # cron
    - script:
        name: echo python information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"
          echo "installed python packages:"
          echo "$(pip freeze | sort)"
    - internal/docker-push:
        username: $DOCKER_HUB_USER
        password: $DOCKER_HUB_PASSWORD
        tag: ${DOCKER_IMAGE_TAG}
        repository: $DOCKER_HUB_REPO
        registry: https://registry.hub.docker.com/v2
        entrypoint: /entrypoint.sh
        ports: ${GUNICORN_PORT}
        working-dir: /usr/src/app

deploy:
  steps:
    - add-to-known_hosts:
      hostname: $DEST_HOST_ADDR
    - script:
      name: create pipeline dir
      code: |
        mkdir -p /pipeline
    - install-packages:
      packages: knockd
    - mktemp:
        envvar: PRIVATEKEY_PATH
    - create-file:
        name: write key
        filename: $PRIVATEKEY_PATH
        content: $PEM_FILE_CONTENT_PRIVATE
        overwrite: true
    - script:
      name: Do deploy
      code: |
        SSH_OPTIONS="-o StrictHostKeyChecking=no -i $PRIVATEKEY_PATH"
        SSH_DEST="$SSH_USER@$DEST_HOST_ADDR"
        SUBSTR=${WERCKER_GIT_COMMIT:0:9}
        echo 'knocking port open'
        for port in ${KNOCK_PORT_SEQUENCE}; do
          knock $DEST_HOST_ADDR $port
          sleep 0.4
        done
        echo 'knocking done'
        scp ${SSH_OPTIONS} nginx.conf ${SSH_DEST}:/nexchange/etc/nginx/nginx.conf
        scp ${SSH_OPTIONS} docker-compose.yml ${SSH_DEST}:/nexchange/docker-compose.yml
        ssh ${SSH_OPTIONS} ${SSH_DEST} << EOF
          ## Steps to stop docker from eating all the space in the drive ##
          # remove exited containers
          docker rm -v $(docker ps -a -q -f status=exited)
          # remove dangling images
          docker rmi $(docker images -f "dangling=true" -q)
          # remove dangling voluemes
          docker volume rm $(docker volume ls -qf dangling=true)

          # export the variables that docker-compose will inject into DB container
          export POSTGIS_ENV_POSTGRES_USER=${POSTGIS_ENV_POSTGRES_USER}
          export POSTGIS_ENV_POSTGRES_PASSWORD=${POSTGIS_ENV_POSTGRES_PASSWORD}
          export POSTGIS_ENV_POSTGRES_DB=${POSTGIS_ENV_POSTGRES_DB}
          export DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}
          export LOGSTASH_ADDRESS=${LOGSTASH_ADDRESS}
          export LOGSTASH_PORT=${LOGSTASH_PORT}
          export DB_VOL=${DB_VOL}
          if [ -z "$DEBUG" ]; then
              echo "DOCKER-COMPOSE CONFIG: \n"
              docker-compose config
              echo "OUR ENV: \n"
              printenv
          fi
          # Login to docker hub (for private images)
          docker login \
            -u $DOCKER_HUB_USER \
            -p $DOCKER_HUB_PASSWORD
          # Start new instance
          docker-compose -f /nexchange/docker-compose.yml pull
          docker-compose -f /nexchange/docker-compose.yml up -d
          docker-compose -f /nexchange/docker-compose.yml scale app=${APP_INSTANCES}
        EOF
tests:
  services:
   - name: redis
     id: redis
     cmd: redis-server

  steps:
    - script:
        name: Install python requirements
        code: |
          pip_download_cache="$WERCKER_CACHE_DIR/wercker/_pipcache"
          mkdir -p ${pip_download_cache}
          yes w | pip install --cache-dir ${pip_download_cache} -r requirements.txt
    - script:
        name: create/validate static build roots
        code: |
           mkdir -p static/bundles
           touch webpack-stats.json
    - script:
      name: Install node requirements
      code: |
        # https://github.com/wercker/support/issues/227 :(
        rm -fr node_modules && npm install
    - maxon/npm-run:
        script: build
    - script:
        name: API tests
        code: |
          DJANGO_SETTINGS_MODULE=nexchange.settings_test ./run-api-tests.sh
    - script:
        name: Backend tests
        code: |
          DJANGO_SETTINGS_MODULE=nexchange.settings_test ./run-tests.sh -c 1

    - script:
        name: Selenium tests
        code: |
          DJANGO_SETTINGS_MODULE=nexchange.settings_test ./run-selenium-tests.sh
    - script:
        name: Frontend tests
        code: |
           export PHANTOMJS_BIN=${WERCKER_SOURCE_DIR}/node_modules/.bin/phantomjs
    - script:
        name: Validate New Relic config file
        code: |
          newrelic-admin validate-config ${NEW_RELIC_CONFIG_FILE}
static-validation-js:
  steps:
    - script:
        name: Run static-validation-js.sh
        code: |
          bash static-validation-js.sh
static-validation-py:
  steps:
    - script:
        name: Run static-validation-py.sh
        code: |
          bash static-validation-py.sh
